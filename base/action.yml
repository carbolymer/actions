name: 'Setup IOG libraries'
description: 'Installs a set of libraries our projects usually depend on'
inputs:
  use-sodium-vrf:
    description: Use libsodium with VRF extension
    type: boolean
    default: true
  url-prefix:
    description: Location to pull the pkgs from
    type: string
    default: https://github.com/input-output-hk/iohk-nix/releases/latest/download

runs:
  using: "composite"
  steps:
    - name: "[darwin] Install library dependencies"
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install --overwrite pkg-config openssl@3.0

        mkdir __prep__
        pushd __prep__
          curl -sL ${{ inputs.url-prefix }}/$(uname -m)-macos.${{ inputs.use-sodium-vrf == 'true' && 'libsodium-vrf' || 'libsodium' }}.pkg > libsodium.pkg
          curl -sL ${{ inputs.url-prefix }}/$(uname -m)-macos.libsecp256k1.pkg > libsecp256k1.pkg
          curl -sL ${{ inputs.url-prefix }}/$(uname -m)-macos.libblst.pkg      > libblst.pkg
          for pkg in *.pkg; do
            sudo installer -pkg $pkg -target /
          done
        popd
        rm -fR __prep__

    - name: "[darwin] update environment variables"
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "LD_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
        # Note: we add both /opt/homebrew/opt and /usr/local/opt for homebrews openssl@3.0, this is
        #       because different GitHub Runner at different revisions have different homebrew opt layouts.
        echo "PKG_CONFIG_PATH=/usr/local/opt/cardano/lib/pkgconfig:/opt/homebrew/opt/openssl@3.0/lib/pkgconfig:/usr/local/opt/openssl@3.0/lib/pkgconfig:/usr/local/opt/icu4c/lib/pkgconfig:$PKG_CONFIG_PATH" \
          >> $GITHUB_ENV

    # There are three pkg-config packages available for mingw, and each one has their problems:
    #
    # - `pacman -S pkgconf` (usually pulled by installing `base-devel`): can't interpret the `PKG_CONFIG_PATH` in a semicolon format.
    #   For `PKG_CONFIG_PATH=C:/pathA;C:/pathB` it searches in `C`, `/pathA;C` and `/pathB`.
    #
    # - `pacman -S mingw-w64-x86_64-pkgconf`: when queried for multiple modversions (as cabal does), it will return only one.
    #
    # - `pacman -S mingw-w64-x86_64-pkg-config`: will strip out `C:/mingw64/lib` and `C:/mingw64/include` from the returned values
    #   unless provided with `PKG_CONFIG_ALLOW_SYSTEM_(CFLAGS|LIBS)` as I do here.
    - name: "[windows] Install library dependencies"
      if: runner.os == 'Windows'
      shell: C:/msys64/usr/bin/bash.exe -e '{0}'
      env:
        MSYSTEM: MINGW64
        # do not ever change to $HOME by yourself.
        CHERE_INVOKING: 1
        # do we want to inherit the path?
        # MSYS2_PATH_TYPE: inherit
      run: |
        mv /c/Strawberry/perl/bin/pkg-config     /c/Strawberry/perl/bin/perl-pkg-config
        mv /c/Strawberry/perl/bin/pkg-config.bat /c/Strawberry/perl/bin/perl-pkg-config.bat

        /usr/bin/pacman --noconfirm -S mingw-w64-x86_64-pkg-config

        echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1"   >> $GITHUB_ENV

        mkdir __prep__
        pushd __prep__
          curl -sL ${{ inputs.url-prefix }}/msys2.${{ inputs.use-sodium-vrf == 'true' && 'libsodium-vrf' || 'libsodium' }}.pkg.tar.zstd > libsodium.pkg.tar.zstd
          curl -sL ${{ inputs.url-prefix }}/msys2.libsecp256k1.pkg.tar.zstd > libsecp256k1.pkg.tar.zstd
          # For windows we need to rely on the v2.2 libblst, otherwise GHC's linker blows up due to
          #
          # GHC runtime linker: fatal error: I found a duplicate definition for symbol
          #    __blst_platform_cap
          # whilst processing object file
          #    C:\msys64\mingw64\opt\cardano\lib\libblst.a
          # The symbol was previously defined in
          #    C:\msys64\mingw64\opt\cardano\lib\libblst.a(#2:server.o)
          # This could be caused by:
          #    * Loading two different object files which export the same symbol
          #    * Specifying the same object file twice on the GHCi command line
          #    * An incorrect `package.conf' entry, causing some object to be
          #      loaded twice.
          # ghc-9.8.1.exe: Could not load Object Code C:\msys64\mingw64\opt\cardano\lib\libblst.a(#1:assembly.o).
          #
          # While we have this fixed in our custom GHCs in haskell.nix, it's not fixed upstream, and we can't trivially
          # fix the windows bindists. Thus for now we just use the older libblst on windows :see_no_evil:
          # curl -sL ${{ inputs.url-prefix }}/msys2.libblst.pkg.tar.zstd      > libblst.pkg.tar.zstd
          curl -sL  https://github.com/input-output-hk/iohk-nix/releases/download/v2.2/msys2.libblst.pkg.tar.zstd > libblst.pkg.tar.zstd
          # OpenSSL .pc files are wrong in openssl-3.3.0 https://github.com/openssl/openssl/issues/24298
          curl -sL https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-openssl-3.2.1-1-any.pkg.tar.zst > openssl.pkg.tar.zstd
          for pkg in *.zstd; do
            /usr/bin/pacman --noconfirm -U $pkg
          done
        popd
        rm -fR __prep__

    # MSYS will inherit the PATH from PWSH, but not the other way round, and setting the path
    # to "PATH=...:$PATH" in bash results in all the paths starting with `/c/` instead of `C:\` which
    # makes some actions (like `actions/checkout`) fail as it cannot find executables.
    - name: "[windows] update environment variables"
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        "PATH=C:\\msys64\\mingw64\\opt\\cardano\\bin;C:\\msys64\\mingw64\\bin;{0}" -f $env:PATH  >> $env:GITHUB_ENV
        "PKG_CONFIG_PATH=C:\\msys64\\mingw64\\opt\\cardano\\lib\\pkgconfig;C:\\msys64\\mingw64\\lib\\pkgconfig;C:\\msys64\\mingw64\\share\\pkgconfig;C:\\msys64\\usr\\lib\\pkgconfig;C:\\msys64\\usr\\share\\pkgconfig;{0}" -f $env:PKG_CONFIG_PATH >> $env:GITHUB_ENV

    - name: "[linux] Install library dependencies"
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get -y install libsystemd-dev

        mkdir __prep__
        pushd __prep__
          curl -sL ${{ inputs.url-prefix }}/debian.${{ inputs.use-sodium-vrf == 'true' && 'libsodium-vrf' || 'libsodium' }}.deb > libsodium.deb
          curl -sL ${{ inputs.url-prefix }}/debian.libsecp256k1.deb > libsecp256k1.deb
          curl -sL ${{ inputs.url-prefix }}/debian.libblst.deb      > libblst.deb
          for pkg in *.deb; do
            sudo dpkg -i $pkg
          done
        popd
        rm -fR __prep__

    - name: "[linux] update environment variables"
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "PKG_CONFIG_PATH=/usr/local/opt/cardano/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/local/opt/cardano/lib:$LD_LIBRARY_PATH"           >> $GITHUB_ENV
